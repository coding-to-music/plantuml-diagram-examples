@startuml Carrier-Strategy-2a
!theme toy 
title Carrier-Strategy-2a
start

:from part1; 

if (if canTakeAnchor(STANDARD)==true) then (true) 
    :takeAnchor(hqLoc,STANDARD); 
    :set haveAnchor=true;
else (no)
endif

if (if haveAnchor==true) then (true) 
    :have anchor;
    if(if islandLoc == null 1) then (true)
        :we don't have an island yet;
        while (loop thru island array)
            :find any available island;
            :break;
        endwhile  
        if(if islandLoc is null 2) then (true)
            :there are no available islands;
            :have anchor but no known islands;
        else (false)
            :found an island;
            :RobotPlayer.moveTowards(rc, islandLoc);
            if (if canPlaceAnchor(STANDARD)==true) then (true) 
                :placeAnchor(hqLoc,STANDARD); 
                :set anchorMode=false;
            else (no)
                :can't place anchor yet;
            endif
        endif
    else (no)
        :have an island location;
        :RobotPlayer.moveTowards(rc, islandLoc);
        if (if canPlaceAnchor(STANDARD)==true) then (true) 
            :placeAnchor(hqLoc,STANDARD); 
            :set anchorMode=false;
        else (no)
        endif
    endif
else (false)
    :no anchor;
    :look for wells;
    if (if wellLoc == null) then (true) 
        :we don't know of any wells; 
        :moveRandomly;
    else (no)
        if (if not isAdjacent(wellLoc)) then (true) 
            :move closer to well; 
            :moveTowards(wellLoc);
        else (no)
        endif
    endif

    if (if areAtCapacity == true) then (true) 
        :head back to HQ; 
        :moveTowards(hqLoc);
    else (no)
    endif
endif 
:Communication.tryWriteMessages(rc);
:Continue to part3; 
stop
@enduml

' else (no)
'     :RobotPlayer.moveTowards(rc, islandLoc);
'     if (if canPlaceAnchor(STANDARD)==true) then (true) 
'         :placeAnchor(hqLoc,STANDARD); 
'         :set anchorMode=false;
'     else (no)
'     endif

' goto lab

' --> "placeholder"

' if "turnCount == 1" then
'   -->[true] "addHeadquarters" as a1
' else
'   if "turnCount == 2" then
'     -->[true] "updateHeadquarters" as a3
'   else
'     if "canBuildAnchor" then
'       -left->[true] "buildAnchor(STANDARD)"
'     else
'       ' while ("numFleetAmplifiersBuilt != 2")
'           ' while ("canCreateAmplifier") 
'             ' :Build Amplifier;            
'           ' endwhile  
'       ' endwhile  
'       ' detach
'       if "canCreateCarrier" then
'         -left->[true] "createRobot(CARRIER)"
'       else
'         if "canCreateLauncher" then
'           -left->[true] "createRobot(LAUNCHER)"
'         else
'           if "canCreateBooster" then
'             -left->[true] "createRobot(BOOSTER)"
'           else
'             if "canCreateDestabilizer" then
'               -left->[true] "createRobot(DESTABILIZER)"
'             else
'               -->[true] "yield (end turn)"
'             endif
'           endif
'         endif
'       endif
'     endif
'   endif
' endif

' :HQ & every robot is called every turn;
' if (if turnCount == 1) then (true) 
' :addHeadquarters; 
' else (no)
' endif
' if (if turnCount == 2) then (true) 
' :updateHeadquarters; 
' else (no)
' endif
' if (if canBuildAnchor) then (true) 
' :buildAnchor(STANDARD); 
' else (no)
' endif
' while ("if numFleetAmplifiersBuilt != 2")
'     while ("if canCreateAmplifier") 
'       :Build Amplifier;            
'     endwhile  
' endwhile  
